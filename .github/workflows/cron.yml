name: Automated ETL Pipeline

on:
  # Schedule the workflow to run automatically
  schedule:
    # Run every day at 2 AM UTC
    - cron: '0 2 * * *'
    # Run every Sunday at 6 AM UTC (weekly)
    # - cron: '0 6 * * 0'
    
  # Allow manual triggering from GitHub UI
  workflow_dispatch:
  
  # Optional: Run on push to main branch for testing
  # push:
  #   branches: [ main ]

jobs:
  run-etl:
    runs-on: ubuntu-latest
    
    steps:
    # Step 1: Checkout the repository
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        # This ensures we get the full git history
        fetch-depth: 0
        # Use the built-in GITHUB_TOKEN for authentication
        token: ${{ secrets.GITHUB_TOKEN }}
    
    # Step 2: Set up Python environment
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'  # or your preferred version
        
    # Step 3: Cache dependencies to speed up builds
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    # Step 4: Install dependencies
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        # If you don't have requirements.txt, install packages directly:
        # pip install feedparser sqlite3 pandas streamlit
    
    # Step 6: Run your Python script
    - name: Run ETL script
      run: |
        python main.py
    
    # Step 7: Check if there are changes to commit
    - name: Check for changes
      id: verify-changed-files
      run: |
        if [ -n "$(git status --porcelain)" ]; then
          echo "changed=true" >> $GITHUB_OUTPUT
        else
          echo "changed=false" >> $GITHUB_OUTPUT
        fi
    
    # Step 8: Commit and push changes (only if there are changes)
    - name: Commit and push changes
      if: steps.verify-changed-files.outputs.changed == 'true'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add .
        git commit -m "Automated ETL update - $(date '+%Y-%m-%d %H:%M:%S')"
        git push
    
    # Step 9: Display results
    - name: Display results
      run: |
        echo "ETL pipeline completed successfully!"
        if [ "${{ steps.verify-changed-files.outputs.changed }}" == "true" ]; then
          echo "Changes were committed and pushed."
        else
          echo "No changes to commit."
        fi
